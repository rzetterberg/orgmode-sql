{-|
Contains the auto-generated types used in the database. All types in this
module are generated by 'mkPersist'

The types are named after the types in orgmode-parse, but are adapted for
being saved in a SQL database.

Hierarchy of a document is stored as a adjacent list:

> ╭──────────╮
> │ Document │
> ╰──────────╯
>   ▲
>   │  ╭─────────╮
>   ╰──│ Heading │ many-to-one
>      ╰─────────╯
>        ▲ ▲ ▲ ▲
>        │ │ │ │  ╭──────────╮
>        │ │ │ ╰──│ Property │ many-to-one
>        │ │ │    ╰──────────╯
>        │ │ │    ╭──────────╮
>        │ │ ╰────│ Planning │ many-to-one
>        │ │      ╰──────────╯
>        │ │      ╭──────────╮
>        │ ╰──────│ Clock    │ many-to-one
>        │        ╰──────────╯
>        │        ╭──────────╮
>        ╰────────│ TagRel   │ one-to-one
>                 ╰──────────╯
>                   │
>                   │
>                   ▼
>           ╭──────────╮
>           │ Tag      │ many-to-many
>           ╰──────────╯

A 'Tag' is simply the name which is unique in the database. So when we save
these three headings:

> * First heading :support:
> * Second heading :support:dev:
> * Third heading :dev:deploy:

The database will contain 3 tags:

> [Tag "support", Tag "dev", Tag "deploy"]

And the 'TagRel' table keeps track of which 'Heading's belongs to which 'Tag's.

Tag relationships for first 'Heading':

> [TagRel 1 1]

Tag relationships for second 'Heading':

> [TagRel 2 1, TagRel 2 2]

Tag relationships for third 'Heading':

> [TagRel 3 2, TagRel 3 3]

A 'Heading'-to-'Tag' relationship is unique, so a 'Heading' cannot belong to
a 'Tag' more than once.

This way we don't have duplicate tag names in the database.
-}

module Database.OrgMode.Types where

import           Data.Default
import           Data.Int (Int64)
import           Data.OrgMode.Parse.Types (Priority(..), PlanningKeyword(..))

import           Database.OrgMode.Internal.Import
import           Database.OrgMode.Internal.PersistDerive()

--------------------------------------------------------------------------------
-- * Auto-generated data types

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Document
    name Text
    text Text
    UniqueDocument name
    deriving Show

Heading
    document DocumentId
    parent HeadingId Maybe
    level Int
    keyword Text Maybe
    priority Priority Maybe
    title Text
    paragraph Text
    deriving Show

Property
    heading HeadingId
    key Text
    value Text
    deriving Show

Planning
    heading HeadingId
    keyword PlanningKeyword
    time UTCTime
    deriving Show

Clock
    heading HeadingId
    active Bool
    start UTCTime
    end UTCTime Maybe
    duration Int
    deriving Show

Tag
    name Text
    UniqueTag name
    deriving Show

TagRel
    heading HeadingId
    item TagId
    deriving Show
|]

--------------------------------------------------------------------------------
-- * Manually created data types

{-|
Represents a summary of a 'Heading' that only contains the title and the total
duration of all clocks for the 'Heading'.

Is made to be used when displaying clock tables and other types of overviews.
-}
data HeadingShort = HeadingShort
  { headingShortDocId    :: Int64
  , headingShortId       :: Int64
  , headingShortParId    :: Maybe Int64
  , headingShortTitle    :: Text
  , headingShortDuration :: Int
  , headingShortSubs     :: [HeadingShort]
  } deriving (Show)

{-|
Represents a row in a 'ClockTable'. Each row consists of the name of the
document, how long the total duration is (all 'Heading's clocks combined) and
a list of 'HeadingShort's.
-}
data ClockRow = ClockRow
  { clockRowDocumentId   :: Int64
  , clockRowDuration     :: Int
  , clockRowShorts       :: [HeadingShort]
  } deriving (Show)

{-|
Represents a clock table which contains 'ClockRow's and a date range that
'Heading's are shown based on their clockings.
-}
data ClockTable = ClockTable
  { clockTableRows   :: [ClockRow]
  , clockTableFilter :: HeadingFilter
  } deriving (Show)


data HeadingFilter = HeadingFilter
  { headingFilterClockStart  :: Maybe UTCTime
  , headingFilterClockEnd    :: Maybe UTCTime
  , headingFilterDocumentIds :: [(Key Document)]
  } deriving (Show)

instance Default HeadingFilter where
    def = HeadingFilter Nothing Nothing []
